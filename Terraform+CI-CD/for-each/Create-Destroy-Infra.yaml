name: Infra-Create-Destroy (for-each)

trigger: none

pool:
  vmImage: 'ubuntu-latest'

variables:
- group: ResourceGroupVars
- group: NetworkVars
- group: VMVars

resources:
  repositories:
    - repository: terraformRepo
      type: github
      name: vamshii7/Terraform-Hands-On
      ref: main
      endpoint: github.com_vamshii7

stages:
# ==============================
# Stage 1: Deploy / Apply
# ==============================
- stage: Deploy
  displayName: "Deploy Infra"
  condition: eq(variables['Build.Reason'], 'Manual')
  jobs:
  - job: Terraform_Apply
    displayName: "Terraform Apply"
    steps:
    - checkout: terraformRepo

    - script: |
        echo "Listing Terraform files:"
        ls -lR $(Build.SourcesDirectory)/Terraform+CI-CD/for-each
      displayName: "List checked out files"

    - task: TerraformInstaller@1
      displayName: "Install Terraform"
      inputs:
        terraformVersion: '1.13.3'

    - script: |
        terraform version
        which terraform
        echo "Current working directory: $(pwd)"
      displayName: "Verify Terraform Installation"

    - task: TerraformTaskV4@4
      displayName: "Terraform Init"
      inputs:
        provider: 'azurerm'
        command: 'init'
        workingDirectory: '$(Build.SourcesDirectory)/Terraform+CI-CD/for-each'
        backendServiceArm: 'TerraformConnection'
        backendAzureRmResourceGroupName: 'tfstate-rg'
        backendAzureRmStorageAccountName: 'temptfstatesa'
        backendAzureRmContainerName: 'tfstate'
        backendAzureRmKey: 'foreach.tfstate'

    - task: TerraformTaskV4@4
      displayName: "Terraform Plan"
      inputs:
        provider: 'azurerm'
        command: 'plan'
        workingDirectory: '$(Build.SourcesDirectory)/Terraform+CI-CD/for-each'
        environmentServiceNameAzureRM: 'TerraformConnection'
        commandOptions: >
          -var="resource_groups=$(resource_groups)"
          -var="network_details=$(network_details)"
          -var="vm_details=$(vm_details)"

    - task: TerraformTaskV4@4
      displayName: "Terraform Apply"
      inputs:
        provider: 'azurerm'
        command: 'apply'
        workingDirectory: '$(Build.SourcesDirectory)/Terraform+CI-CD/for-each'
        environmentServiceNameAzureRM: 'TerraformConnection'
        commandOptions: >
          --auto-approve
          -var="resource_groups=$(resource_groups)"
          -var="network_details=$(network_details)"
          -var="vm_details=$(vm_details)"

# ---------------------------
# Stage 2: Manual Approval Gate
# ---------------------------
- stage: Approval
  displayName: "Manual Approval Before Destroy"
  dependsOn: Deploy
  condition: succeeded()
  jobs:
  - job: WaitForApproval
    displayName: "Approve or Reject Destroy"
    pool: server
    steps:
    - task: ManualValidation@0
      timeoutInMinutes: 1440
      inputs:
        instructions: |
          Approve to proceed with destruction of Infra.
        onTimeout: 'reject'

# ==============================
# Stage 3: Destroy
# ==============================
- stage: Destroy
  displayName: "Destroy Infra"
  dependsOn: Approval
  condition: eq(dependencies.Approval.result, 'Succeeded')
  jobs:
  - job: Terraform_Destroy
    displayName: "Terraform Destroy"
    steps:
    - checkout: terraformRepo

    - script: |
        echo "Listing Terraform files:"
        ls -lR $(Build.SourcesDirectory)/Terraform+CI-CD/for-each
      displayName: "List checked out files"

    - task: TerraformInstaller@1
      displayName: "Install Terraform"
      inputs:
        terraformVersion: '1.13.3'

    - task: TerraformTaskV4@4
      displayName: "Terraform Init"
      inputs:
        provider: 'azurerm'
        command: 'init'
        workingDirectory: '$(Build.SourcesDirectory)/Terraform+CI-CD/for-each'
        backendServiceArm: 'TerraformConnection'
        backendAzureRmResourceGroupName: 'tfstate-rg'
        backendAzureRmStorageAccountName: 'temptfstatesa'
        backendAzureRmContainerName: 'tfstate'
        backendAzureRmKey: 'foreach.tfstate'

    - task: TerraformTaskV4@4
      displayName: "Terraform Destroy"
      inputs:
        provider: 'azurerm'
        command: 'destroy'
        workingDirectory: '$(Build.SourcesDirectory)/Terraform+CI-CD/for-each'
        environmentServiceNameAzureRM: 'TerraformConnection'
        commandOptions: >
          --auto-approve
          -var="resource_groups=$(resource_groups)"
          -var="network_details=$(network_details)"
          -var="vm_details=$(vm_details)"