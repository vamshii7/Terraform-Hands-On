name: Terraform-Agent-Build

trigger: none

pool:
  name: MyAgentPool

variables:
  - group: TerraformSecrets

stages:

# ---------------------------
# Stage 1: Deploy / Apply
# ---------------------------
- stage: Deploy
  displayName: "Deploy VM to AgentPool"
  condition: eq(variables['Build.Reason'], 'Manual')
  jobs:
  - job: Terraform_Apply
    displayName: "Terraform Apply"
    steps:
    - checkout: self

    - task: TerraformInstaller@1
      displayName: "Install Terraform"
      inputs:
        terraformVersion: 'latest'

    - task: TerraformTask@5
      displayName: "Terraform Init"
      inputs:
        provider: 'azurerm'
        command: 'init'
        workingDirectory: 'agentInfra'
        backendServiceArm: 'TerraformConnection'
        backendAzureRmResourceGroupName: 'tfstate-rg'
        backendAzureRmStorageAccountName: 'temptfstatesa'
        backendAzureRmContainerName: 'tfstate'
        backendAzureRmKey: 'terraform.tfstate'

    - task: TerraformTask@5
      displayName: "Terraform Plan"
      inputs:
        provider: 'azurerm'
        command: 'plan'
        workingDirectory: 'agentInfra'
        environmentServiceNameAzureRM: 'TerraformConnection'
        commandOptions: >
          -var="ado_pat=$(ado_pat)"
          -var="admin_password=$(admin_password)"
          -var="ado_org_url=$(ado_org_url)"

    - task: TerraformTask@5
      displayName: "Terraform Apply"
      inputs:
        provider: 'azurerm'
        command: 'apply'
        workingDirectory: 'agentInfra'
        environmentServiceNameAzureRM: 'TerraformConnection'
        commandOptions: >
          -auto-approve
          -var="ado_pat=$(ado_pat)"
          -var="admin_password=$(admin_password)"
          -var="ado_org_url=$(ado_org_url)"
    - script: |
        VM_IP=$(terraform output -raw vm_public_ip)
        echo "##vso[task.setvariable variable=vm_ip]$VM_IP"
      displayName: "Capture VM Public IP"


# ---------------------------
# Stage 2: Destroy
# ---------------------------
- stage: Destroy
  displayName: "Destroy VM from AgentPool"
  dependsOn: Deploy
  condition: eq(variables['Build.Reason'], 'Manual')
  jobs:
  - job: Terraform_Destroy
    displayName: "Terraform Destroy"
    steps:
    - checkout: self

    - task: TerraformInstaller@1
      displayName: "Install Terraform"
      inputs:
        terraformVersion: 'latest'

    - task: TerraformTask@5
      displayName: "Terraform Init"
      inputs:
        provider: 'azurerm'
        command: 'init'
        workingDirectory: 'agentInfra'
        backendServiceArm: 'TerraformConnection'
        backendAzureRmResourceGroupName: 'tfstate-rg'
        backendAzureRmStorageAccountName: 'temptfstatesa'
        backendAzureRmContainerName: 'tfstate'
        backendAzureRmKey: 'terraform.tfstate'

    # # ðŸ§¹ De-register agent before destroy
    # - script: |
    #     VM_IP=$(terraform output -raw vm_public_ip)
    #     echo "Resolved VM IP: $VM_IP"
    #     sshpass -p "$(admin_password)" ssh -o StrictHostKeyChecking=no agent@$VM_IP << EOF
    #       cd ~/agent
    #       ./config.sh remove
    #       sudo ./svc.sh uninstall
    #     EOF
    #   displayName: "De-register Azure DevOps Agent"

    - task: TerraformTask@5
      displayName: "Terraform Destroy"
      inputs:
        provider: 'azurerm'
        command: 'destroy'
        workingDirectory: 'agentInfra'
        environmentServiceNameAzureRM: 'TerraformConnection'
        commandOptions: >
          -auto-approve
          -var="ado_pat=$(ado_pat)"
          -var="admin_password=$(admin_password)"
          -var="ado_org_url=$(ado_org_url)"